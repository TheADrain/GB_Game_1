- Bank Switching Note -
	- Finally seems to be working... Some notes
		- Use the extern keyword in the header file when declaring rom data
		- in the bank_n.h include all the asset header files
		- in the bank_n.c include all the c files
		- in the main rom code include the bank_h.h file and you should be able to access vars without
			having compile issues, but they should be compiled to the correct data bank


TODO:
- consider uploading the template project to github
- then maybe implementing the same template project in RGBASM assembler?

- player
	- split player logic into states
		GROUNDED, JUMPING, FALLING, etc etc
	- player mechanics
		jumping
		jump hold a to go higher
		dash in 4 directions? maybe just 2
	- player powerups
		not sure yet, some kind of projectile maybe? fire flower style

- environment objects
	- moving platforms up/down
	- moving platforms left/right
	- falling platforms?
	- 

- sound
	- need a system for muting particular sound channels for N frames 
	- need a system to hold sound effect data (channels, noise pattern and triggering muting music channels)

- debug
	- need a debug menu accesible with start+select and able to be defined out of builds
	- needs to contain a level select menu

- Toolchain (once we've figured out how to load levels and actually started building levels to play,
	don't do this until we have an actual game in the making)
	- need something to compile all the level data into large blobs
	- compile all level info into a huge table in MAP_DATA_1 bank
		- we need to be able to access the width/height/etc details of every map from one pointer+offset
	- then compile all the levels into files for each bank
		- EG: bank 1 = level data array + maps 1-5, bank 2 = maps 6-10, etc etc (assuming 5 maps per bank)
			- might need to make sure bank 1 has enough space for the level data array but it shouldn't be a big prob

- System stuff


- Input
	- 

- Title/Splash screen

- Level Loading Flow
	- display a screen showing the level number 
	- start the game once it's been done

	- load levels using this array of level data:
		- LEVEL_DATA struct { width, height, rom_bank, &level_map, &collision_map, &things_map }
		- add tileset to the above data structure
		- add any other meta data here such as level type
			- enum LevelType { HORIZONTAL_SCROLLER, VERTICAL_SCROLLER, etc }

	- triggerable from debug menu as well as from hitting a level transition tile or the end of the level?

	- player spawning at the right position in the level (left-most for horiz, bottom for vert)

- Game Flow
	- implement the level loading flow and a debug command for going to the next level?

	- create a structure for the player data (x, y , sub_x, sub_y, speed)
		- sortas done, arguable if this needs to be a STRUCT or just globals
	- create a struct for objects
		- { world_x, world_y, sprite, animation_data etc }

- Game Camera
	- maybe wants to be a little smorter? not so eager to follow on the Y axis
	- fix the scrolling getting out of sync bug... :(


